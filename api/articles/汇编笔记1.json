{"title":"汇编笔记1","slug":"汇编笔记1","date":"2021-01-12T03:43:30.000Z","updated":"2021-01-12T03:59:24.799Z","comments":true,"path":"api/articles/汇编笔记1.json","photos":[],"link":"","excerpt":"大概一年前学了一点，后来就搁置了，这个寒假捡回来给他冲完","covers":["/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/1.jpg","/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/2.jpg","/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/3.jpg","/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/4.jpg","/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/5.jpg","/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/6.jpg"],"content":"<p>大概一年前学了一点，后来就搁置了，这个寒假捡回来给他冲完</p>\n<a id=\"more\"></a>\n\n<p>一个寄存器分为高位和低位，如AX寄存器分为AH和AL</p>\n<p>当寄存器中存放的数据超出位数限制大小时，寄存器只会保留没有超出的那部分，如</p>\n<p>mov ax 8226H</p>\n<p>add ax 8226H</p>\n<p>这其中ax计算的值理应为1044CH，但是限于AX寄存器是16位大小，寄存器中最终的值为044CH，进位1并不是真的丢弃（书中暂未提，后续再记）</p>\n<p>在进行数据传送和运算时，要注意指令的两个操作对象位数应当是一致的</p>\n<p>如 mov ax bh 就是错误的指令</p>\n<p>物理地址（对于8086CPU）<br>*<em>物理地址=段地址</em>16+偏移地址**</p>\n<ol>\n<li>   起始地址=段地址*16（必然是16的倍数）</li>\n<li>   16位地址的寻址能力为64KB，因此一个段的长度最大为64KB</li>\n<li>   可以用不同的段地址和偏移地址形成<em>同一个物理地址</em></li>\n</ol>\n<p>例子：<br><img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/1.jpg\" alt=\"1\"></p>\n<p>相当于通过地址加法器将两个16位地址合成为一个20位的物理地址</p>\n<p>段寄存器：CS，DS，SS，ES</p>\n<p>CS和IP<br>CS为代码段寄存器，IP为指令指针寄存器<br>8086机中，任意时刻，CPU将CS：IP指向的内容当作指令执行<br>一个最简单的修改CS：IP的指令jmp</p>\n<ol>\n<li><p>   jmp 段地址：偏移地址</p>\n</li>\n<li><p>   jmp 某一合法寄存器</p>\n</li>\n</ol>\n<blockquote>\n<p>jmp ax<br>指令执行前: ax=1000H，CS=2000H，IP=0003H<br>指令执行后: ax=1000H，CS=2000H，IP=1000H</p>\n</blockquote>\n<p>记一些debug实验的内容吧。</p>\n<p>R命令：查看、修改CPU寄存器的内容<br>例： 分别执行了查看各寄存器、修改CS寄存器、修改IP寄存器<br><img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/2.jpg\" alt=\"2\"> </p>\n<p>D ：查看内存中的内容</p>\n<p>E ：修改内存中的内容（前提是该内存可修改）<br>关于此有一个实验题是要求在fff00~fffff中找到pc主板机上ROM中写有的一个生产日期并试图修改它。   以下是我的实验过程👇<br><img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/3.jpg\" alt=\"3\"></p>\n<p>我成功找到并试图修改其内容，但修改后再查看发现其并没有改变，再回头看提示，才想明白该内存段是属于rom的地址空间，而rom为只读内存，无法修改。</p>\n<p>U ：将内存中的内容解释为机器指令和对应的汇编指令<br>例<br> <img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/4.jpg\" alt=\"4\"></p>\n<p>T ：执行CS：IP指向的内存单元处的指令（t一次执行一次，ip自动跳转下一个指令）<br>例<br><img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/5.jpg\" alt=\"5\"> </p>\n<p>A ：以汇编指令的形式向内存中写入指令<br>例<br><img src=\"/2021/01/12/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B01/6.jpg\" alt=\"6\"></p>\n","categories":[{"name":"学习笔记","slug":"学习笔记","count":1,"path":"api/categories/学习笔记.json"},{"name":"汇编语言（王爽）","slug":"学习笔记/汇编语言（王爽）","count":1,"path":"api/categories/学习笔记/汇编语言（王爽）.json"}],"tags":[{"name":"汇编笔记","slug":"汇编笔记","count":1,"path":"api/tags/汇编笔记.json"}]}